{
  "compilerOptions": {
    /* 请访问 https://aka.ms/tsconfig 了解有关此文件的更多信息 */

    /* Projects（项目）*/
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件，以便对项目进行增量编译 */
    // "composite": true,                                /* 允许 TypeScript 项目使用项目引用的约束条件 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 在引用复合项目时，禁用首选源文件而非声明文件。 */
    // "disableSolutionSearching": true,                 /* 在编辑时将项目从多项目参照检查中移除 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量 */

    /* Language and Environment（语言与环境） */
    "target": "es2016" /* 为发射的 JavaScript 设置 JavaScript 语言版本，并包含兼容库声明*/,
    // "lib": [],                                        /* 指定一组捆绑的库声明文件，用于描述目标运行环境 */
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码 */
    "experimentalDecorators": true /* 允许对传统实验装饰器的实验支持。 */,
    // "emitDecoratorMetadata": true,                    /* 为源文件中的装饰声明提供设计类型元数据 */
    // "jsxFactory": "",                                 /* 指定针对 React JSX 发射时使用的 JSX 工厂函数，例如 "React.createElement "或 "h" */
    // "jsxFragmentFactory": "",                         /* 指定针对 React JSX emit 时用于片段的 JSX 片段引用，例如 "React.Fragment "或 "Fragment" */
    // "jsxImportSource": "",                            /* 指定在使用 "jsx: react-jsx*"时用于导入 JSX 工厂函数的模块指定符 */
    // "reactNamespace": "",                             /* 指定 "createElement "调用的对象。这仅适用于以 "react "JSX 发射为目标的情况 */
    // "noLib": true,                                    /* 禁止包含任何库文件，包括默认的 lib.d.ts */
    // "useDefineForClassFields": true,                  /* 排放符合 ECMAScript 标准的类字段 */
    // "moduleDetection": "auto",                        /* 控制用于检测模块格式 JS 文件的方法 */
    "jsx": "react-jsx" /* 指定生成的 JSX 代码 */,

    /* Modules（模块） */
    "module": "commonjs" /* 指定生成的模块代码 */,
    // "rootDir": "./",                                  /* 指定源文件的根文件夹 */
    // "moduleResolution": "node10",                     /* 指定 TypeScript 如何从给定的模块指定符查找文件 */
    "baseUrl": "./" /* 指定用于解析非相关模块名称的基本目录 */,
    "paths": {
      "@/*": ["src/*"]
    } /* 指定一组条目，将导入重新映射到其他查找位置 */,
    // "rootDirs": [],                                   /* 在解析模块时，允许将多个文件夹视为一个 */
    "typeRoots": [
      "./types/*.d.ts",
      "node_modules/@types"
    ] /* 指定多个类似于"./node_modules/@types "的文件夹 */,
    // "types": [],                                      /* 指定不在源文件中引用而要包含的类型包名称 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局 */
    // "moduleSuffixes": [],                             /* 解析模块时要搜索的文件名后缀列表 */
    // "allowImportingTsExtensions": true,               /* 允许导入包含 TypeScript 文件扩展名。需要设置"--moduleResolution bundler "和"--noEmit "或"--emitDeclarationOnly"。 */
    // "resolvePackageJsonExports": true,                /* 在解析软件包导入时使用 package.json 的 "exports "字段 */
    // "resolvePackageJsonImports": true,                /* 解析导入时，使用 package.json 的 "imports"字段 */
    // "customConditions": [],                           /* 在解析导入时，除了解析器特定的默认设置外，还需要设置的条件 */
    // "resolveJsonModule": true,                        /* 允许导入 .json 文件 */
    // "allowArbitraryExtensions": true,                 /* 只要有声明文件，就可以导入任何扩展名的文件 */
    // "noResolve": true,                                /* 禁止 "import"、"require "或"<reference>"扩展 TypeScript 应添加到项目中的文件数量 */

    /* JavaScript Support */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为程序的一部分。使用 "checkJS "选项从这些文件中获取错误信息 */
    // "checkJs": true,                                  /* 在经过类型检查的 JavaScript 文件中启用错误报告功能 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定用于从 "node_modules "中检查 JavaScript 文件的最大文件夹深度。仅适用于 "allowJs" */

    /* Emit（发射） */
    // "declaration": true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件 */
    // "declarationMap": true,                           /* 为 d.ts 文件创建源映射 */
    // "emitDeclarationOnly": true,                      /* 只输出 d.ts 文件，不输出 JavaScript 文件 */
    // "sourceMap": true,                                /* 为发出的 JavaScript 文件创建源映射文件 */
    // "inlineSourceMap": true,                          /* 在发射的 JavaScript 中包含源映射文件 */
    // "outFile": "./",                                  /* 指定一个文件，将所有输出捆绑到一个 JavaScript 文件中。如果 "声明 "为 true，则也指定一个文件，将所有 .d.ts 输出捆绑在一起 */
    // "outDir": "./",                                   /* 为所有输出文件指定一个输出文件夹. */
    // "removeComments": true,                           /* 禁用发送注释 */
    // "noEmit": true,                                   /* 禁止从编译中发射文件 */
    // "importHelpers": true,                            /* 允许每个项目从 tslib 中导入一次辅助函数，而不是按文件导入 */
    // "importsNotUsedAsValues": "remove",               /* 为仅用于类型的导入指定发射/检查行为 */
    // "downlevelIteration": true,                       /* 排放更合规、但冗长且性能较差的 JavaScript 用于迭代 */
    // "sourceRoot": "",                                 /* 指定调试器查找参考源代码的根路径 */
    // "mapRoot": "",                                    /* 指定调试器查找映射文件的位置，而不是生成的位置 */
    // "inlineSources": true,                            /* 在源码图中包含源代码，并将其置于发射的 JavaScript 中 */
    // "emitBOM": true,                                  /* 在输出文件开头输出 UTF-8 字节顺序标记 (BOM) */
    // "newLine": "crlf",                                /* 设置发射文件的换行符 */
    // "stripInternal": true,                            /* 禁用在 JSDoc 注释中包含"@internal "的声明 */
    // "noEmitHelpers": true,                            /* 禁用在编译输出中生成自定义辅助函数，如"__extends" */
    // "noEmitOnError": true,                            /* 如果报告了任何类型检查错误，则禁用发射文件 */
    // "preserveConstEnums": true,                       /* 禁用删除生成代码中的 "枚举常量 "声明 */
    // "declarationDir": "./",                           /* 指定生成声明文件的输出目录 */
    // "preserveValueImports": true,                     /* 在 JavaScript 输出中保留未使用的导入值，否则这些值将被删除 */

    /* Interop Constraints（互操作限制） */
    // "isolatedModules": true,                          /* 确保每个文件都能安全地转译，而无需依赖其他导入 */
    // "verbatimModuleSyntax": true,                     /* 不要转换或省略任何未标记为纯类型的导入或导出，确保根据 "模块 "设置以输出文件格式写入 */
    // "allowSyntheticDefaultImports": true,             /* 当模块没有默认导出时，允许 "import x from y" */
    "esModuleInterop": true /* 放出额外的 JavaScript，以简化对 CommonJS 模块导入的支持。这将启用 "allowSyntheticDefaultImports"，以实现类型兼容性 */,
    // "preserveSymlinks": true,                         /* 禁止根据实际路径解析符号链接。这与 node 中的标志相同 */
    "forceConsistentCasingInFileNames": true /* 确保套管进口正确 */,

    /* Type Checking (类型检查)*/
    "strict": true /* 启用所有严格的类型检查选项 */,
    // "noImplicitAny": true,                            /* 启用隐含 "any "类型的表达式和声明的错误报告功能 */
    // "strictNullChecks": true,                         /* 类型检查时，考虑 "空 "和 "未定义 */
    // "strictFunctionTypes": true,                      /* 在分配函数时，检查以确保参数和返回值与子类型兼容 */
    // "strictBindCallApply": true,                      /* 检查 "绑定"、"调用 "和 "应用 "方法的参数是否与原始函数一致 */
    // "strictPropertyInitialization": true,             /* 检查已声明但未在构造函数中设置的类属性 */
    // "noImplicitThis": true,                           /* 当 "this "的类型为 "any "时，启用错误报告功能 */
    // "useUnknownInCatchVariables": true,               /* 将捕获子句变量默认为 "未知"，而不是 "任何" */
    // "alwaysStrict": true,                             /* 确保始终发出 "use strict" */
    // "noUnusedLocals": true,                           /* 启用本地变量未读取时的错误报告功能 */
    // "noUnusedParameters": true,                       /* 未读取函数参数时出错 */
    // "exactOptionalPropertyTypes": true,               /* 按写法解释可选属性类型，而不是添加 "未定义" */
    // "noImplicitReturns": true,                        /* 对于函数中未明确返回的代码路径，启用错误报告功能 */
    // "noFallthroughCasesInSwitch": true,               /* 启用开关语句中穿通情况的错误报告功能 */
    // "noUncheckedIndexedAccess": true,                 /* 使用索引访问类型时，添加 "undefined" */
    // "noImplicitOverride": true,                       /* 确保派生类中的覆盖成员标有覆盖修改器 */
    // "noPropertyAccessFromIndexSignature": true,       /* 对使用索引类型声明的键强制使用索引访问器 */
    // "allowUnusedLabels": true,                        /* 禁用未使用标签的错误报告 */
    // "allowUnreachableCode": true,                     /* 禁用无法到达代码的错误报告 */

    /* Completeness（完整性） */
    // "skipDefaultLibCheck": true,                      /* 跳过 TypeScript 附带的 .d.ts 文件类型检查 */
    "skipLibCheck": true /* 跳过所有 .d.ts 文件的类型检查 */
  },
  "include": ["./src", "./types/*.d.ts"]
}
